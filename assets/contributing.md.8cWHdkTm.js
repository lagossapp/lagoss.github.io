import{_ as e,c as a,o,a2 as t}from"./chunks/framework.CSd21wiM.js";const b=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"contributing.md","filePath":"contributing.md"}'),r={name:"contributing.md"},n=t('<p>Thanks for wanting to contribute! That means a lot to us. You can contribute in many ways, with or without any coding required.</p><div class="info custom-block"><p class="custom-block-title">INFO</p><p>Need some good first issues to start with? Check out the <a href="https://github.com/lagossapp/lagoss/issues?q=is%3Aissue+is%3Aopen+label%3A%22good+first+issue%22" target="_blank" rel="noreferrer">good first issue label</a> on GitHub!</p></div><h2 id="non-code-contributions" tabindex="-1">Non-code contributions <a class="header-anchor" href="#non-code-contributions" aria-label="Permalink to &quot;Non-code contributions&quot;">​</a></h2><h3 id="issues-and-community-help" tabindex="-1">Issues and community help <a class="header-anchor" href="#issues-and-community-help" aria-label="Permalink to &quot;Issues and community help&quot;">​</a></h3><p>Work in progress...</p><h3 id="documentation-website" tabindex="-1">Documentation website <a class="header-anchor" href="#documentation-website" aria-label="Permalink to &quot;Documentation website&quot;">​</a></h3><p>The documentation website is made of <a href="https://en.wikipedia.org/wiki/Markdown" target="_blank" rel="noreferrer">Markdown</a> files, located in <code>packages/docs/pages/</code>. It uses <a href="https://nextra.vercel.app/" target="_blank" rel="noreferrer">Nextra</a> behind the scenes.</p><p>If you want to preview your changes, you can run the documentation website locally. First, follow the <a href="#requirements">Requirements</a>, and then run <code>pnpm start:docs</code> at the root of the project. You can now access the documentation website on <code>localhost:3000</code>.</p><h2 id="code-contributions" tabindex="-1">Code contributions <a class="header-anchor" href="#code-contributions" aria-label="Permalink to &quot;Code contributions&quot;">​</a></h2><h3 id="coding-guidelines" tabindex="-1">Coding guidelines <a class="header-anchor" href="#coding-guidelines" aria-label="Permalink to &quot;Coding guidelines&quot;">​</a></h3><ul><li>Commits are following the <a href="https://www.conventionalcommits.org/en/v1.0.0/" target="_blank" rel="noreferrer">conventional commits</a> convention.</li><li>We use ESLint and Prettier to format our code, which should be handled automatically by most editors. If this is not the case, you can run the <code>lint</code> script.</li><li>Make sure to add a test when adding new features / fixing bugs, so we can prevent any other future bugs.</li></ul><h3 id="requirements" tabindex="-1">Requirements <a class="header-anchor" href="#requirements" aria-label="Permalink to &quot;Requirements&quot;">​</a></h3><p>You will need <a href="https://nodejs.org/en/" target="_blank" rel="noreferrer">Node.js</a> &gt;= 16 and <a href="https://pnpm.io/" target="_blank" rel="noreferrer">PNPM</a> &gt;= 7 (as of writing). You will also need <a href="https://www.docker.com/" target="_blank" rel="noreferrer">Docker</a> installed, and if you want to contribute to any Rust code, you will need <a href="https://www.rust-lang.org/" target="_blank" rel="noreferrer">Rust</a> &gt;= 1.67 installed.</p><ol><li>Fork and clone the repository</li><li>Install all NPM dependencies: <code>pnpm install</code></li></ol><p>If you want to contribute to the Dashboard / Serverless / CLI:</p><ol start="3"><li><p>Run the local docker-compose: <code>docker-compose up -d</code></p></li><li><p>Copy <code>packages/dashboard/.env.example</code> to <code>packages/dashboard/.env</code>, and <code>crates/serverless/.env.example</code> to <code>crates/serverless/.env</code></p></li><li><p>Fill in the following environment variables:</p></li></ol><h5 id="in-packages-dashboard-env-and-crates-serverless-env" tabindex="-1">In <code>packages/dashboard/.env</code> and <code>crates/serverless/.env</code>: <a class="header-anchor" href="#in-packages-dashboard-env-and-crates-serverless-env" aria-label="Permalink to &quot;In `packages/dashboard/.env` and `crates/serverless/.env`:&quot;">​</a></h5><ul><li>(optional) <code>AXIOM_ORG_ID</code>, <code>AXIOM_TOKEN</code> to send and get logs to Axiom</li></ul><h5 id="in-packages-dashboard-env" tabindex="-1">In <code>packages/dashboard/.env</code>: <a class="header-anchor" href="#in-packages-dashboard-env" aria-label="Permalink to &quot;In `packages/dashboard/.env`:&quot;">​</a></h5><ul><li><code>NEXTAUTH_SECRET</code> is a random secret for <a href="https://authjs.dev/getting-started/oauth-tutorial#adding-environment-variables" target="_blank" rel="noreferrer">NextAuth.js</a>. Generate one using <code>$ openssl rand -base64 32</code></li><li>(optional) <code>GITHUB_CLIENT_ID</code>, <code>GITHUB_CLIENT_SECRET</code> are GitHub OAuth credentials. <a href="https://github.com/settings/developers" target="_blank" rel="noreferrer">Create a GitHub OAuth App</a></li><li>(optional) <code>GOOGLE_CLIENT_ID</code>, <code>GOOGLE_CLIENT_SECRET</code> are Google OAuth credentials. <a href="https://console.developers.google.com/apis/credentials" target="_blank" rel="noreferrer">Create a Google OAuth App</a></li><li>(optional) <code>SMTP_HOST</code>, <code>SMTP_PORT</code>, <code>SMTP_USER</code>, <code>SMTP_PASSWORD</code>, <code>SMTP_FROM</code> are SMTP credentials to send emails</li></ul><h4 id="www" tabindex="-1">www <a class="header-anchor" href="#www" aria-label="Permalink to &quot;www&quot;">​</a></h4><p>Navigate to <code>www</code> and run <code>pnpm dev</code> to start the website.</p><h4 id="ui" tabindex="-1">UI <a class="header-anchor" href="#ui" aria-label="Permalink to &quot;UI&quot;">​</a></h4><p>Navigate to <code>packages/ui</code> and run <code>pnpm dev</code> to start the Storybook server.</p><h4 id="dashboard" tabindex="-1">Dashboard <a class="header-anchor" href="#dashboard" aria-label="Permalink to &quot;Dashboard&quot;">​</a></h4><p>Navigate to <code>packages/dashboard</code> and run <code>pnpm prisma migrate dev</code> to generate the database tables. You can now start the dashboard using <code>pnpm dev</code>.</p><h4 id="js-runtime" tabindex="-1">JS Runtime <a class="header-anchor" href="#js-runtime" aria-label="Permalink to &quot;JS Runtime&quot;">​</a></h4><p>Navigate to <code>packages/js-runtime</code> and run <code>pnpm build</code> to build the JavaScript runtime. You can also run <code>pnpm dev</code> to watch for changes and automatically rebuild.</p><h4 id="serverless" tabindex="-1">Serverless <a class="header-anchor" href="#serverless" aria-label="Permalink to &quot;Serverless&quot;">​</a></h4><p>Make sure you&#39;ve followed the <a href="#requirements">Requirements</a> and the <a href="#js-runtime">JS Runtime</a> setup.</p><p>Navigate to <code>crates/serverless</code> and run <code>cargo run</code> to start the Serverless process. You can also run <code>cargo test</code> at the root of the project to run all tests.</p><h4 id="cli" tabindex="-1">CLI <a class="header-anchor" href="#cli" aria-label="Permalink to &quot;CLI&quot;">​</a></h4><p>Make sure you&#39;ve followed the <a href="#requirements">Requirements</a> and the <a href="#js-runtime">JS Runtime</a> setup.</p><p>Navigate to <code>crates/cli</code> and run <code>cargo run</code> to start the CLI. You can pass arguments to the CLI using <code>cargo run -- &lt;args&gt;</code>. For example, <code>cargo run -- dev index.ts</code>.</p><h4 id="wpt-runner" tabindex="-1">WPT Runner <a class="header-anchor" href="#wpt-runner" aria-label="Permalink to &quot;WPT Runner&quot;">​</a></h4><p>Make sure you&#39;ve followed the <a href="#requirements">Requirements</a> and the <a href="#js-runtime">JS Runtime</a> setup.</p><p>First, you&#39;ll need to update the WPT submodule. Navigate to <code>tools/wpt</code> and run <code>git submodule update --init</code>.</p><p>Then, navigate to <code>crates/wpt-runner</code> and run <code>cargo run</code> to start the WPT Runner. You can optionally pass a path to a specific file or directory to run the tests on. For example, <code>cargo run -- ../../tools/wpt/fetch/api/headers/header-setcookie.any.js</code></p><p>Every time you update the js-runtime code, you will need to rebuild it. We recommend running the <code>dev</code> script of js-runtime to watch for changes and automatically rebuild.</p><h3 id="before-submitting-a-pr" tabindex="-1">Before submitting a PR <a class="header-anchor" href="#before-submitting-a-pr" aria-label="Permalink to &quot;Before submitting a PR&quot;">​</a></h3><p>We have some checks in place to ensure we don&#39;t introduce bugs or regressions in PRs. You can run <code>pnpm lint</code> and <code>pnpm typecheck</code> at the project&#39;s root to ensure there are no lint and type errors.</p><p>Finally, run <code>pnpm changeset</code> to generate a <a href="https://github.com/changesets/changesets#how-do-we-do-that" target="_blank" rel="noreferrer">changeset file</a>. Select the modified packages and choose the SemVer increment &quot;major&quot;, &quot;minor&quot;, or &quot;patch&quot;, then write a short description of the changes.</p>',42),s=[n];function i(d,c,l,u,h,p){return o(),a("div",null,s)}const g=e(r,[["render",i]]);export{b as __pageData,g as default};
