import{_ as s,c as e,o as i,a2 as a,a9 as n,aa as t}from"./chunks/framework.CSd21wiM.js";const m=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"usage/environment-variables.md","filePath":"usage/environment-variables.md"}'),o={name:"usage/environment-variables.md"},l=a(`<p>You can use Environment Variables to store configuration options, or sensitive information such as API keys, passwords, and tokens.</p><p>Environment variables are injected to <a href="http://localhost:3000/runtime-apis#processenv" target="_blank" rel="noreferrer"><code>process.env</code></a> when your Function is executed. You can access them the same way you would access them in Node.js:</p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> handler</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">request</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Request</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Response</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line highlighted"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (request.headers.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Authorization&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!==</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> process.env.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AUTH_TOKEN</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Response</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Unauthorized&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, { status: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">401</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> });</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Response</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Welcome!&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>By default, it will only contain the <code>NODE_ENV</code> variable, which is set to <code>&quot;production&quot;</code> when deployed, and to <code>&quot;development&quot;</code> when using <a href="./../cli.html#lagoss-dev"><code>lagoss dev</code></a>.</p><h2 id="development" tabindex="-1">Development <a class="header-anchor" href="#development" aria-label="Permalink to &quot;Development&quot;">​</a></h2><p>During development, <code>.env</code> files are automatically detected and loaded. You can also manually specify the <code>--env</code> flag of the <a href="http://localhost:3000/cli#lagoss-dev" target="_blank" rel="noreferrer"><code>dev</code> command</a> to use a custom path for your environment file.</p><h2 id="adding-environment-variables" tabindex="-1">Adding environment variables <a class="header-anchor" href="#adding-environment-variables" aria-label="Permalink to &quot;Adding environment variables&quot;">​</a></h2><p>Head over to the settings tab of your Function, and scroll to the &quot;Environment variables&quot; section. Here, you can see all your Environment Variables, which are empty by default.</p><p>Enter a key and value, then click on &quot;Add&quot;. You can keep adding Environment Variables until you&#39;re satisfied, and then click on &quot;Submit&quot; to save your changes.</p><p>You can also copy and paste an entire <code>.env</code> file, which will be automatically parsed and added to your Environment Variables.</p><div class="info custom-block"><p class="custom-block-title">INFO</p><p>After submitting, your Function&#39;s current production Deployment will automatically be updated with the new environment variables: you don&#39;t need to manually trigger another Deployment!</p></div><p><img src="`+n+'" alt="Environment Variables"></p><h2 id="removing-environment-variables" tabindex="-1">Removing environment variables <a class="header-anchor" href="#removing-environment-variables" aria-label="Permalink to &quot;Removing environment variables&quot;">​</a></h2><p>To remove an Environment Variable, click on the &quot;Remove&quot; button next to it. Click on &quot;Submit&quot; to save your changes.</p><p><img src="'+t+'" alt="Environment Variables List"></p>',15),r=[l];function h(p,d,k,c,u,E){return i(),e("div",null,r)}const v=s(o,[["render",h]]);export{m as __pageData,v as default};
